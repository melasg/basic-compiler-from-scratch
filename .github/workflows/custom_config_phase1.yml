name: custom CI to test phase I of the project

on:
  workflow_dispatch:
  release:
  push:
    tags:
      - phase*
      - phase1
      - phase2
      - phase3

jobs:
  build:
    strategy:
      matrix:
        os_type: [macos-10.15, windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os_type }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: install dependencies (linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y bison flex
      - name: Build Dependencies (macOS)
        if: matrix.os == 'macos-10.15'
        run: |
          brew install bison flex curl
      - name: Build Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install winflexbison
          ren "C:\ProgramData\chocolatey\bin\win_bison.exe" "bison.exe"
          ren "C:\ProgramData\chocolatey\bin\win_flex.exe" "flex.exe"
  test_p1:
    needs: build
    strategy:
      matrix:
       os_type: [macos-10.15, windows-latest, ubuntu-latest]
       
    runs-on: ${{ matrix.os_type }}
    steps:
      - uses: actions/checkout@v2
      - name: LINUX test from previously built (look ma no hands)
        if: matrix.os_type == 'ubuntu-latest'
        run: |
          pwd
          flex mini_l.lex
          gcc -o lexer lex.yy.c -lfl
          cat fibonacci.min | lexer >>{{ matrix.os_type }}_fib_test.txt
          cat primes.min | lexer >>{{matrix.os_type }}_primes_test.txt
        shell: bash
      - name: OSX test from previously built (look ma no hands)
        if: matrix.os_type == 'macos-10.15'
        run: |
          flex mini_l.lex
          gcc -o lexer lex.yy.c -ll
          cat fibonacci.min | lexer >>{{ matrix.os_type }}_fib_test.txt
          cat primes.min | lexer >>{{matrix.os_type }}_primes_test.txt
        shell: bash
      - name: WINDOWS test from previously built (look ma no hands)
        if: matrix.os_type == 'windows-latest'
        run: |
          flex mini_l.lex
          gcc -o lexer lex.yy.c -ll
          cat fibonacci.min | lexer >>{{ matrix.os_type }}_fib_test.txt
          cat primes.min | lexer >>{{matrix.os_type }}_primes_test.txt
        shell: bash
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: CI_test_results_${{ matrix.os_type }}
          path: ${{ github.action_path }}/p_I/
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: clean up post test files
        run: |
          rm lex.yy.c
          rm lexer
// MINI-L BNF Grammar specification
// Melody Asghari
// July 10, 2021
// made by hand, diagrams generated on https://bottlecaps.de/rr/ui
//  Preview  ::= 'terminals' = circle
//            | nonterminals = rectangle
//            | EBNF - expression
//     copy for format:

//          ::= 

/* FINAL, DOUBLE CHECKED EBNF GRAMMAR! AND USING NAMES INSTEAD OF SYMBOLS NOW */
program
         ::= function*
         | ε
function ::= 'FUNCTION' 'IDENT' ';' 'BEGIN_PARAMS' declarations 'END_PARAMS' 'BEGIN_LOCALS' declarations 'END_LOCALS' 'BEGIN_BODY' statements 'END_BODY'
declaration
         ::= 'IDENT' ( ',' 'IDENT' )* ':' ( 'ARRAY' '[' 'NUMBER' ']' 'OF' )? 'INTEGER'
declarations
         ::= ( declaration ';' )*
         | ε
statements
         ::= ( statement ';' )+
statement
         ::= ( var 'ASSIGN' | 'RETURN' ) expression
           | 'IF' bool-expr 'THEN' statements ( 'ELSE' statements )? 'ENDIF'
           | ( 'WHILE' bool-expr | 'FOR' var 'ASSIGN' 'NUMBER' ';' bool-expr ';' var 'ASSIGN' expression ) 'BEGINLOOP' statements 'ENDLOOP'
           | 'DO' 'BEGINLOOP' statements 'ENDLOOP' 'WHILE' bool-expr
           | ( 'READ' | 'WRITE' ) var ( ',' var )*
           | 'CONTINUE'
bool-expr
         ::= relation-and-expr ( '||' relation-and-expr )*
relation-and-expr
         ::= relation-expr ( '&&' relation-expr )*
relation-expr
         ::= 'NOT'? ( expression comp expression | 'TRUE' | 'FALSE' | '(' bool-expr ')' )
comp     ::= '=='
           | '<>'
           | '<'
           | '>'
           | '<='
           | '>='
expression
         ::= multiplicative-expr ( ( '+' | '-' ) multiplicative-expr )*
multiplicative-expr
         ::= term ( ( '*' | '/' | '%' ) term )*
term     ::= '-'? ( var | 'NUMBER' | '(' expression ')' )
           | 'IDENT' '(' ( expression ( ',' expression )* )? ')'
var      ::= 'IDENT' ( '[' expression ']' )?
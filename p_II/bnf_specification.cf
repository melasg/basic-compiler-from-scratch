// MINI-L BNF Grammar specification
// Melody Asghari
// July 10, 2021
// made by hand, diagrams generated on https://bottlecaps.de/rr/ui
//  Preview  ::= 'terminals' = circle
//            | nonterminals = rectangle
//            | EBNF - expression
//     copy for format:

//          ::= 

/* FINAL, DOUBLE CHECKED EBNF GRAMMAR! AND USING NAMES INSTEAD OF SYMBOLS NOW */
program
         ::= function*
         | ε
function ::= 'FUNCTION' 'IDENT' 'SEMICOLON' 'BEGIN_PARAMS' declarations 'END_PARAMS' 'BEGIN_LOCALS' declarations 'END_LOCALS' 'BEGIN_BODY' statements 'END_BODY'
declaration
         ::= 'IDENT' ( 'COMMA' 'IDENT' )* 'COLON' ( 'ARRAY' 'L_SQUARE_BRACKET' 'NUMBER' 'R_SQUARE_BRACKET' 'OF' )? 'INTEGER'
declarations
         ::= ( declaration 'SEMICOLON' )*
         | ε
statements
         ::= ( statement 'SEMICOLON' )+
statement
         ::= ( var 'ASSIGN' | 'RETURN' ) expression
           | 'IF' bool-expr 'THEN' statements ( 'ELSE' statements )? 'ENDIF'
           | ( 'WHILE' bool-expr | 'FOR' var 'ASSIGN' 'NUMBER' 'SEMICOLON' bool-expr 'SEMICOLON' var 'ASSIGN' expression ) 'BEGINLOOP' statements 'ENDLOOP'
           | 'DO' 'BEGINLOOP' statements 'ENDLOOP' 'WHILE' bool-expr
           | ( 'READ' | 'WRITE' ) var ( 'COMMA' var )*
           | 'CONTINUE'
bool-expr
         ::= relation-and-expr ( 'OR' relation-and-expr )*
relation-and-expr
         ::= relation-expr ( 'AND' relation-expr )*
relation-expr
         ::= 'NOT'? ( expression comp expression | 'TRUE' | 'FALSE' | 'L_PAREN' bool-expr 'R_PAREN' )
comp     ::= 'EQ'
           | 'NEQ'
           | 'LT'
           | 'GT'
           | 'LTE'
           | 'GTE'
expression
         ::= multiplicative-expr ( ( 'ADD' | 'SUB' ) multiplicative-expr )*
multiplicative-expr
         ::= term ( ( 'MULT' | 'DIV' | 'MOD' ) term )*
term     ::= 'SUB'? ( var | 'NUMBER' | 'L_PAREN' expression 'R_PAREN' )
           | 'IDENT' 'L_PAREN' ( expression ( 'COMMA' expression )* )? 'R_PAREN'
var      ::= 'IDENT' ( 'L_SQUARE_BRACKET' expression 'R_SQUARE_BRACKET' )?